name: Build
on: [push]
env:
  PROJECT_NAME: kubectl-node-provider-id
jobs:
  build:
    # Set the job to run on the platform specified by the matrix below
    runs-on: ${{ matrix.runner }}

    # Define the build matrix for cross-compilation
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: linux-arm64
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin

    # The steps to run for each matrix item
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Build Binary
        shell: bash
        run: |
          CARGO_BUILD_CMD=cargo
          if [ -n "${CROSS}" ]; then
            echo "Using Cross"
            cargo binstall cross --no-confirm
            CARGO_BUILD_CMD=cross
          fi
          ${CARGO_BUILD_CMD} build --verbose --locked --release --target ${{ matrix.target }}
        env:
          CROSS: "${{ matrix.cross }}"

      - name: Copy Binary
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

          # Define a better name for the final binary
          BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"

          # Move the built binary where you want it
          mkdir -p ./artifacts
          mv "${BIN_OUTPUT}" "./artifacts/${BIN_RELEASE}"

      - name: Compress binary
        if: runner.os != 'Windows'
        run: |
          tar -czvf ./${{ matrix.name }}.tar.gz -C ./artifacts .

      - name: Compress binary (windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path .\artifacts\* -DestinationPath .\${{ matrix.name }}.zip

      - name: Upload binary
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}.tar.gz
          path: ${{ matrix.name }}.tar.gz
          if-no-files-found: error
          retention-days: 1

      - name: Upload binary (windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}.zip
          path: ${{ matrix.name }}.zip
          if-no-files-found: error
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/download-artifact@v4
        if: startsWith(github.ref, 'refs/tags/')
      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: true
          generate_release_notes: true
          name: "${{ github.ref_name }}"
          fail_on_unmatched_files: true
          files: |
            ./linux-amd64/*
            ./macos-arm64/*
            ./win-amd64/*
            ./macos-amd64/*
